# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 600
    MemorySize: 2048
    Tracing: Active
    Environment:
      Variables:
        TABLE_WISH_LISTS: !Ref TableWishLists
        TABLE_ITEMS: !Ref TableItems
        TABLE_ITEM_HISTORIES: !Ref TableItemHistories
    DeadLetterQueue:
      Type: SNS
      TargetArn: arn:aws:sns:ap-northeast-1:267428311438:failed-lambda

Resources:
  ## ROLE
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'aws_service'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: ['xray:*', 'dynamodb:*', 'sns:*', 'logs:*']
                Resource: '*'
  ## ApiGatewayApi:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
  ## Lambda Layer
  PuppeteerLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: puppeteer Layer
      ContentUri: layer
  ## Lambda-controllers
  WishListsGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: server/app/controllers/wish_lists.get
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /wish_lists
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
  LogWishListsGet:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WishListsGet}
      RetentionInDays: 14
  ItemsGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: server/app/controllers/items.get
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /items
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
      Layers:
        - !Ref PuppeteerLayer
  LogItemsGet:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ItemsGet}
      RetentionInDays: 14
  ## Lambda-schedulers
  ItemsUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: server/app/schedulers/items.update
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref PuppeteerLayer
  LogItemsUpdate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ItemsUpdate}
      RetentionInDays: 14
  ItemHistoriesUpdate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: server/app/schedulers/itemHistories.update
      Role: !GetAtt LambdaRole.Arn
      Layers:
        - !Ref PuppeteerLayer
  LogItemHistoriesUpdate:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ItemHistoriesUpdate}
      RetentionInDays: 14
  ## DynamoDB
  TableWishLists:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: 'URL'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'URL'
          KeyType: 'HASH'
  TableItems:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: 'URL'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'URL'
          KeyType: 'HASH'
      TimeToLiveSpecification:
        AttributeName: "EXPIRED_AT"
        Enabled: true
  TableItemHistories:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: "URL"
          AttributeType: "S"
        - AttributeName: "SCRAPED_AT"
          AttributeType: "N"
        - AttributeName: "DISCOUNT_RATE"
          AttributeType: "N"
        - AttributeName: "POINTS_RATE"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "URL"
          KeyType: "HASH"
        - AttributeName: "SCRAPED_AT"
          KeyType: "RANGE"
      LocalSecondaryIndexes:
        - IndexName: "DiscountIndex"
          KeySchema:
            - AttributeName: "URL"
              KeyType: "HASH"
            - AttributeName: "DISCOUNT_RATE"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "PointsIndex"
          KeySchema:
            - AttributeName: "URL"
              KeyType: "HASH"
            - AttributeName: "POINTS_RATE"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      TimeToLiveSpecification:
        AttributeName: "EXPIRED_AT"
        Enabled: true
Outputs:
  WishListsGet:
    Description: 'WishListsGet ARN'
    Value: !GetAtt WishListsGet.Arn
  LambdaRole:
    Description: 'Implicit IAM Role created for lambda function'
    Value: !GetAtt LambdaRole.Arn
