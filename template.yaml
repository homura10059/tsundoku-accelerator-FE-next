# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 600
    MemorySize: 2048
    Tracing: Active
    DeadLetterQueue:
      Type: SNS
      TargetArn: arn:aws:sns:ap-northeast-1:267428311438:failed-lambda

Resources:
  ## ROLE
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "publish_sns"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ]
                Resource: "*"
              - Effect: "Allow"
                Action: "sns:*"
                Resource: "*"
              - Effect: "Allow"
                Action: [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                  "xray:GetSamplingStatisticSummaries"
                ]
                Resource: "*"
  ## ApiGatewayApi:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
  ## Lambda
  WishListsGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: controller/wish_lists.get
      Role: !GetAtt LambdaRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /wish_lists/{id}
            Method: get
            RestApiId:
              Ref: ApiGatewayApi
  LogWishListsGet:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${WishListsGet}
      RetentionInDays: 14
  ## DynamoDB
#  AmazonItems:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      ProvisionedThroughput:
#        ReadCapacityUnits: 1
#        WriteCapacityUnits: 1
#      AttributeDefinitions:
#        - AttributeName: "Url"
#          AttributeType: "S"
#        - AttributeName: "LastScrapeDateTime"
#          AttributeType: "N"
#        - AttributeName: "DiscountPer"
#          AttributeType: "N"
#        - AttributeName: "PointsPer"
#          AttributeType: "N"
#      KeySchema:
#        - AttributeName: "Url"
#          KeyType: "HASH"
#        - AttributeName: "LastScrapeDateTime"
#          KeyType: "RANGE"
#      LocalSecondaryIndexes:
#        - IndexName: "DiscountIndex"
#          KeySchema:
#            - AttributeName: "Url"
#              KeyType: "HASH"
#            - AttributeName: "DiscountPer"
#              KeyType: "RANGE"
#          Projection:
#            ProjectionType: "ALL"
#        - IndexName: "PointsIndex"
#          KeySchema:
#            - AttributeName: "Url"
#              KeyType: "HASH"
#            - AttributeName: "PointsPer"
#              KeyType: "RANGE"
#          Projection:
#            ProjectionType: "ALL"
#      TimeToLiveSpecification:
#        AttributeName: "Expired"
#        Enabled: true
Outputs:
  WishListsGet:
    Description: 'WishListsGet ARN'
    Value: !GetAtt WishListsGet.Arn
  LambdaRole:
    Description: 'Implicit IAM Role created for lambda function'
    Value: !GetAtt LambdaRole.Arn
