# https://github.com/awslabs/serverless-application-model/blob/develop/versions/2016-10-31.md
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 600
    MemorySize: 2048
    Tracing: Active
    DeadLetterQueue:
      Type: SNS
      TargetArn: arn:aws:sns:ap-northeast-1:267428311438:failed-lambda

Resources:
  ## Lambda
  Main:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      Handler: lambda_handler.default
      Role: !GetAtt MainRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: dummy
      Events:
        ScheduledEventForMain:
          Type: Schedule
          Properties:
            Schedule: cron(0 8 * * ? *)
            Input: '{"urls":["https://www.amazon.jp/hz/wishlist/ls/1KERB2C8N5NGY","https://www.amazon.jp/hz/wishlist/ls/1CU482XA9HO5F","https://www.amazon.jp/hz/wishlist/ls/3E1B11VRAD7UZ"]}'
      Layers:
        - !Ref CommonLayer
  MainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "publish_sns"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ]
                Resource: "*"
              - Effect: "Allow"
                Action: "sns:*"
                Resource: "*"
              - Effect: "Allow"
                Action: [
                  "xray:PutTraceSegments",
                  "xray:PutTelemetryRecords",
                  "xray:GetSamplingRules",
                  "xray:GetSamplingTargets",
                  "xray:GetSamplingStatisticSummaries"
                ]
                Resource: "*"
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: puppeteer Layer
      ContentUri: layer
  LogGroupMain:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${Main}
      RetentionInDays: 14
  ## DynamoDB
  AmazonItems:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: "Url"
          AttributeType: "S"
        - AttributeName: "LastScrapeDateTime"
          AttributeType: "N"
        - AttributeName: "DiscountPer"
          AttributeType: "N"
        - AttributeName: "PointsPer"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "Url"
          KeyType: "HASH"
        - AttributeName: "LastScrapeDateTime"
          KeyType: "RANGE"
      LocalSecondaryIndexes:
        - IndexName: "DiscountIndex"
          KeySchema:
            - AttributeName: "Url"
              KeyType: "HASH"
            - AttributeName: "DiscountPer"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "PointsIndex"
          KeySchema:
            - AttributeName: "Url"
              KeyType: "HASH"
            - AttributeName: "PointsPer"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      TimeToLiveSpecification:
        AttributeName: "Expired"
        Enabled: true
Outputs:
  AmazonScraper:
    Description: 'Lambda Function ARN'
    Value: !GetAtt Main.Arn
  AmazonScraperIamRole:
    Description: 'Implicit IAM Role created for lambda function'
    Value: !GetAtt MainRole.Arn
