generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map(name: "email_verified")
  image         String?
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  posts         Post[]
  wishLists     WishList[]

  @@map(name: "users")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model WishList {
  id                    String              @id @default(cuid())
  url                   String
  scrapedAt             Int?
  userId                Int?
  discountRateThreshold Int                 @default(0)
  pointsRateThreshold   Int                 @default(0)
  user                  User?               @relation(fields: [userId], references: [id])
  items                 Item[]              @relation(references: [url])
  SlackNotifications    SlackNotification[]

  @@map(name: "wishLists")
}

model SlackNotification {
  id                 String   @id @default(cuid())
  incomingWebhookUrl String
  channel            String
  wishListId         String
  wishList           WishList @relation(fields: [wishListId], references: [id])

  @@map(name: "slackNotifications")
}

model Item {
  url          String     @id
  title        String?
  scrapedAt    Int?
  price        Int?
  discount     Int?
  discountRate Int?
  points       Int?
  pointsRate   Int?
  wishLists    WishList[] @relation(references: [id])

  @@map(name: "items")
}
